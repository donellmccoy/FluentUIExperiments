// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using FluentUIExperiments.Models1;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace FluentUIExperiments.Models1
{
    public partial class DataCenterWorkflowContext
    {
        private IDataCenterWorkflowContextProcedures _procedures;

        public virtual IDataCenterWorkflowContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DataCenterWorkflowContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDataCenterWorkflowContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<USP_GET_INITIALIZATION_DATAResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GET_INITIALIZATION_DATA_1Result>().HasNoKey().ToView(null);
        }
    }

    public partial class DataCenterWorkflowContextProcedures : IDataCenterWorkflowContextProcedures
    {
        private readonly DataCenterWorkflowContext _context;

        public DataCenterWorkflowContextProcedures(DataCenterWorkflowContext context)
        {
            _context = context;
        }

        public virtual async Task<List<USP_GET_INITIALIZATION_DATAResult>> USP_GET_INITIALIZATION_DATAAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GET_INITIALIZATION_DATAResult>("EXEC @returnValue = [dbo].[USP_GET_INITIALIZATION_DATA]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GET_INITIALIZATION_DATA_1Result>> USP_GET_INITIALIZATION_DATA_1Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };

            var _ = await _context.SqlQueryAsync<USP_GET_INITIALIZATION_DATA_1Result>("EXEC @returnValue = [dbo].[USP_GET_INITIALIZATION_DATA_1]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
